import { Unpromisify } from './types/utils.js';
import * as youtube_player_dist_types from 'youtube-player/dist/types';
import { EventEmitter } from 'eventemitter3';
import { YTPP_Event, YTPP_Options, YTPP_MethodsToChange } from './types/lib.js';
import { YTAPI_API, YTAPI_PlaybackRate, YTAPI_PlaybackQuality, YTAPI_Event } from './types/youtube.js';

/**
 * YouTubePlayerPlus. A wrapper around the Youtube iframe API.
 * @param {HTMLElement|selector} element
 * @param {YTPP_Options} options
 */
declare class YouTubePlayerPlus extends EventEmitter<YTPP_Event> {
    private _element?;
    private _options;
    private _api?;
    private _player?;
    private _ready;
    private _autoplay;
    private _queue;
    private _interval?;
    private _start?;
    videoId?: string;
    destroyed: boolean;
    constructor(element: HTMLElement | string, options?: YTPP_Options);
    protected _debug(...args: any[]): void;
    protected _loadIframeApi(callback: (api?: YTAPI_API, err?: Error) => void): void;
    protected _createPlayer(videoId: string): void;
    load(videoId: string, autoplay?: boolean, start?: number): void;
    play(): void;
    pause(): void;
    stop(): void;
    set currentTime(seconds: number);
    seek(seconds: number): void;
    set volume(volume: number);
    setVolume(volume: number): void;
    get volume(): number;
    getVolume(): number;
    set muted(muted: boolean);
    mute(): void;
    unMute(): void;
    get muted(): boolean;
    isMuted(): boolean;
    set size({ width, height }: {
        width: number;
        height: number;
    });
    setSize(width: number, height: number): void;
    get size(): {
        width: number;
        height: number;
    };
    getSize(): {
        width: number;
        height: number;
    };
    set playbackRate(rate: YTAPI_PlaybackRate);
    setPlaybackRate(rate: number): void;
    set playbackQuality(suggestedQuality: YTAPI_PlaybackQuality);
    setPlaybackQuality(suggestedQuality: YTAPI_PlaybackQuality): void;
    get playbackQuality(): YTAPI_PlaybackQuality;
    getPlaybackQuality(): string;
    get availablePlaybackQualities(): YTAPI_PlaybackQuality[];
    getAvailablePlaybackQualities(): YTAPI_PlaybackQuality[];
    get playbackRate(): YTAPI_PlaybackRate;
    getPlaybackRate(): number;
    get availablePlaybackRates(): YTAPI_PlaybackRate[];
    getAvailablePlaybackRates(): readonly number[];
    get duration(): number;
    getDuration(): number;
    get progress(): number;
    getProgress(): number;
    get state(): string;
    getState(): string;
    get currentTime(): number;
    getCurrentTime(): number;
    get youTubeInstance(): false | Unpromisify<youtube_player_dist_types.YouTubePlayer> | undefined;
    getYouTubeInstance(): false | Unpromisify<youtube_player_dist_types.YouTubePlayer> | undefined;
    get percentageWatched(): number;
    getPercentageWatched(): number;
    destroy(): void;
    protected _destroy(error?: Error): void;
    protected _queueCommand(command: YTPP_MethodsToChange, ...args: any[]): void;
    protected _flushQueue(): void;
    /**
     * This event fires when the player has finished loading and is ready to
     * begin receiving API calls.
     */
    protected _onReady(): void;
    /**
     * Called when the player's state changes. We emit friendly events `so the user
     * doesn't need to use Youtube's YT.PlayerState.* event constants.
     */
    protected _onStateChange(event: YTAPI_Event): void;
    /**
     * This event fires whenever the video playback quality changes.
     * @param {YTAPI_Event<YTAPI_PlaybackQuality>} event
     */
    protected _onPlaybackQualityChange(event: YTAPI_Event<YTAPI_PlaybackQuality>): void;
    /**
     * This event fires whenever the video playback rate changes.
     */
    protected _onPlaybackRateChange(event: YTAPI_Event<YTAPI_PlaybackRate>): void;
    /**
     * This event fires if an error occurs in the player.
     */
    protected _onError(event: YTAPI_Event): boolean | undefined;
    /**
     * This event fires when the time indicated by the `getCurrentTime()`
     * method has been updated. Whoever is listening to the timeupdate
     * event, we emit an event to all of them.
     */
    protected _onTimeUpdate(): void;
    protected _startInterval(): void;
    protected _stopInterval(): void;
}

export { YouTubePlayerPlus as default };
