import {
  __commonJS,
  __publicField,
  __toESM
} from "./chunk-TCQZMY3T.js";

// node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/eventemitter3/index.js"(exports, module) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = /* @__PURE__ */ Object.create(null);
      if (!new Events().__proto__)
        prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
      else
        emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events();
      else
        delete emitter._events[evt];
    }
    function EventEmitter2() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter2.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0)
        return names;
      for (name in events = this._events) {
        if (has.call(events, name))
          names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter2.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i2 = 0, l2 = handlers.length, ee = new Array(l2); i2 < l2; i2++) {
        ee[i2] = handlers[i2].fn;
      }
      return ee;
    };
    EventEmitter2.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i2;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i2 = 1, args = new Array(len - 1); i2 < len; i2++) {
          args[i2 - 1] = arguments[i2];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i2 = 0; i2 < length; i2++) {
          if (listeners[i2].once)
            this.removeListener(event, listeners[i2].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i2].fn.call(listeners[i2].context);
              break;
            case 2:
              listeners[i2].fn.call(listeners[i2].context, a1);
              break;
            case 3:
              listeners[i2].fn.call(listeners[i2].context, a1, a2);
              break;
            case 4:
              listeners[i2].fn.call(listeners[i2].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i2].fn.apply(listeners[i2].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter2.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter2.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i2 = 0, events = [], length = listeners.length; i2 < length; i2++) {
          if (listeners[i2].fn !== fn || once && !listeners[i2].once || context && listeners[i2].context !== context) {
            events.push(listeners[i2]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
    EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
    EventEmitter2.prefixed = prefix;
    EventEmitter2.EventEmitter = EventEmitter2;
    if ("undefined" !== typeof module) {
      module.exports = EventEmitter2;
    }
  }
});

// node_modules/youtube-player-plus/dist/chunk-REK3HHK7.js
var a = ((r) => (r.HTTPS = "https://www.youtube.com/iframe_api", r.HTTP = "http://www.youtube.com/iframe_api", r))(a || {});
var n = ((o2) => (o2[o2.UNSTARTED = -1] = "UNSTARTED", o2[o2.ENDED = 0] = "ENDED", o2[o2.PLAYING = 1] = "PLAYING", o2[o2.PAUSED = 2] = "PAUSED", o2[o2.BUFFERING = 3] = "BUFFERING", o2[o2.CUED = 5] = "CUED", o2))(n || {});
var d = ((e) => (e[e.INVALID_PARAM = 2] = "INVALID_PARAM", e[e.HTML5_ERROR = 5] = "HTML5_ERROR", e[e.NOT_FOUND = 100] = "NOT_FOUND", e[e.UNPLAYABLE_1 = 101] = "UNPLAYABLE_1", e[e.UNPLAYABLE_2 = 150] = "UNPLAYABLE_2", e))(d || {});
var u = ((e) => (e.INVALID_PARAM = "The request contains an invalid parameter value.", e.HTML5_ERROR = "The request content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.", e.NOT_FOUND = "The video requested was not found.", e.UNPLAYABLE_1 = "The owner of the requested video does not allow it to be played in embedded players.", e.UNPLAYABLE_2 = "This error is the same as 101. The owner of the requested video does not allow it to be played in embedded players.", e))(u || {});
var i = ((t) => (t.ELEMENT_NOT_FOUND = "No element was found.", t.UNRECOGNIZED_STATE_CHANGE = "Unrecognized state change event", t.UNKNOWN_ERROR_CODE = "Unknown error code", t.FAILED_TO_LOAD = "YouTube Iframe API failed to load.", t))(i || {});

// node_modules/youtube-player-plus/dist/chunk-YB27CSNR.js
function l(n2, t, r) {
  return new Promise((o2, a2) => {
    let e = document.createElement("script");
    e.async = true, e.src = n2, Object.entries(t || {}).forEach(([d2, c]) => {
      e.setAttribute(d2, c);
    }), e.onload = () => {
      e.onerror = e.onload = null, o2(e);
    }, e.onerror = () => {
      e.onerror = e.onload = null, a2(new Error(`Failed to load ${n2}`));
    }, (r || document.head || document.getElementsByTagName("head")[0]).appendChild(e);
  });
}

// node_modules/eventemitter3/index.mjs
var import_index = __toESM(require_eventemitter3(), 1);

// node_modules/youtube-player-plus/dist/index.js
var s = [];
var o = class extends import_index.default {
  constructor(e, t) {
    super();
    __publicField(this, "_element");
    __publicField(this, "_options");
    __publicField(this, "_api");
    __publicField(this, "_player");
    __publicField(this, "_ready", false);
    __publicField(this, "_autoplay", false);
    __publicField(this, "_queue", []);
    __publicField(this, "_interval");
    __publicField(this, "_start");
    __publicField(this, "videoId");
    __publicField(this, "destroyed", false);
    let a2 = typeof e == "string" ? document.querySelector(e) : e;
    if (!a2)
      throw new Error("No element was found.");
    this._element = a2, this._options = Object.assign({ width: 640, height: 360, autoplay: false, captions: void 0, controls: true, keyboard: true, fullscreen: true, annotations: true, modestBranding: false, relatedVideos: true, timeUpdateFrequency: 0, playsInline: true, start: 0, debug: false, host: "https://www.youtube-nocookie.com" }, t || {}), this._startInterval = this._startInterval.bind(this), this._stopInterval = this._stopInterval.bind(this), this.on("playing", this._startInterval), this.on("unstarted", this._stopInterval), this.on("ended", this._stopInterval), this.on("paused", this._stopInterval), this.on("buffering", this._stopInterval), this._loadIframeApi((i2, n2) => {
      if (n2)
        return this._destroy(new Error("YouTube Iframe API failed to load."));
      i2 && (this._api = i2), this.videoId && this.load(this.videoId, this._autoplay, this._start);
    });
  }
  _debug(...e) {
    if (this._options.debug) {
      let t = (/* @__PURE__ */ new Date()).toLocaleString("en", { timeStyle: "medium" });
      console.log(`${t}: `, ...e);
    }
  }
  _loadIframeApi(e) {
    if (window.YT && typeof window.YT.Player == "function")
      return e(window.YT);
    if (s.push(e), !document.querySelector(`script[src="${a}"]`)) {
      let i2 = window.location.protocol === "http" ? "HTTP" : "HTTPS";
      l(a[i2]).catch((n2) => {
        for (; s.length; ) {
          let u2 = s.shift();
          u2 && u2(void 0, n2);
        }
      });
    }
    let a$1 = window.onYouTubeIframeAPIReady;
    window.onYouTubeIframeAPIReady = () => {
      for (typeof a$1 == "function" && a$1(); s.length; ) {
        let i2 = s.shift();
        i2 && i2(window.YT, void 0);
      }
    };
  }
  _createPlayer(e) {
    var _a, _b;
    if (this.destroyed || !this._element || !((_a = this._api) == null ? void 0 : _a.Player) || !this._options)
      return;
    let t = this._options, a2 = (_b = this._api) == null ? void 0 : _b.Player;
    this._player = new a2(this._element, { width: t.width || 640, height: t.height || 360, videoId: e, host: t.host || "https://www.youtube-nocookie.com", playerVars: { autoplay: t.autoplay ? 1 : 0, cc_load_policy: t.captions !== void 0 ? t.captions ? 1 : 0 : void 0, hl: t.captions !== void 0 && t.captions !== "" ? t.captions : void 0, cc_lang_pref: t.captions !== null && t.captions !== "" ? t.captions : void 0, controls: t.controls ? 2 : 0, disablekb: t.keyboard ? 0 : 1, enablejsapi: 1, fs: t.fullscreen ? 1 : 0, iv_load_policy: t.annotations ? 1 : 3, modestbranding: t.modestBranding ? 1 : 0, origin: window.location.origin, playsinline: t.playsInline ? 1 : 0, rel: t.relatedVideos ? 1 : 0, wmode: "opaque", start: t.start, loop: 0, showinfo: 1 }, events: { onReady: () => this._onReady(), onStateChange: (i2) => this._onStateChange(i2), onPlaybackQualityChange: (i2) => this._onPlaybackQualityChange(i2), onPlaybackRateChange: (i2) => this._onPlaybackRateChange(i2), onError: (i2) => this._onError(i2) } });
  }
  load(e, t = false, a2 = 0) {
    if (!this.destroyed && (this.videoId = e, this._autoplay = t, this._start = a2, !!this._api)) {
      if (!this._player) {
        this._createPlayer(e);
        return;
      }
      this._ready && (t ? this._player.loadVideoById({ videoId: e, startSeconds: a2 }) : this._player.cueVideoById({ videoId: e, startSeconds: a2 }));
    }
  }
  play() {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.playVideo() : this._queueCommand("play");
  }
  pause() {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.pauseVideo() : this._queueCommand("pause");
  }
  stop() {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.stopVideo() : this._queueCommand("stop");
  }
  set currentTime(e) {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.seekTo(e, true) : this._queueCommand("seek", e);
  }
  seek(e) {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.seekTo(e, true) : this._queueCommand("seek", e);
  }
  set volume(e) {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.setVolume(e) : this._queueCommand("setVolume", e);
  }
  setVolume(e) {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.setVolume(e) : this._queueCommand("setVolume", e);
  }
  get volume() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getVolume()) || 0;
  }
  getVolume() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getVolume()) || 0;
  }
  set muted(e) {
    var _a, _b;
    this._ready ? e ? (_a = this._player) == null ? void 0 : _a.mute() : (_b = this._player) == null ? void 0 : _b.unMute() : this._queueCommand(e ? "mute" : "unMute");
  }
  mute() {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.mute() : this._queueCommand("mute");
  }
  unMute() {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.unMute() : this._queueCommand("unMute");
  }
  get muted() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.isMuted()) || false;
  }
  isMuted() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.isMuted()) || false;
  }
  set size({ width: e, height: t }) {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.setSize(e, t) : this._queueCommand("setSize", e, t);
  }
  setSize(e, t) {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.setSize(e, t) : this._queueCommand("setSize", e, t);
  }
  get size() {
    var _a, _b;
    return { width: parseInt(this._ready && ((_a = this._player) == null ? void 0 : _a.getIframe().width) || "0") || 0, height: parseInt(this._ready && ((_b = this._player) == null ? void 0 : _b.getIframe().height) || "0") || 0 };
  }
  getSize() {
    var _a, _b;
    return { width: parseInt(this._ready && ((_a = this._player) == null ? void 0 : _a.getIframe().width) || "0") || 0, height: parseInt(this._ready && ((_b = this._player) == null ? void 0 : _b.getIframe().height) || "0") || 0 };
  }
  set playbackRate(e) {
    var _a;
    [0.25, 0.5, 1, 1.5, 2].includes(e) && (this._ready ? (_a = this._player) == null ? void 0 : _a.setPlaybackRate(e) : this._queueCommand("setPlaybackRate", e));
  }
  setPlaybackRate(e) {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.setPlaybackRate(e) : this._queueCommand("setPlaybackRate", e);
  }
  set playbackQuality(e) {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.setPlaybackQuality(e) : this._queueCommand("setPlaybackQuality", e);
  }
  setPlaybackQuality(e) {
    var _a;
    this._ready ? (_a = this._player) == null ? void 0 : _a.setPlaybackQuality(e) : this._queueCommand("setPlaybackQuality", e);
  }
  get playbackQuality() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getPlaybackQuality()) || "default";
  }
  getPlaybackQuality() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getPlaybackQuality()) || "default";
  }
  get availablePlaybackQualities() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getAvailableQualityLevels()) || [];
  }
  getAvailablePlaybackQualities() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getAvailableQualityLevels()) || [];
  }
  get playbackRate() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getPlaybackRate()) || 1;
  }
  getPlaybackRate() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getPlaybackRate()) || 1;
  }
  get availablePlaybackRates() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getAvailablePlaybackRates()) || [1];
  }
  getAvailablePlaybackRates() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getAvailablePlaybackRates()) || [1];
  }
  get duration() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getDuration()) || 0;
  }
  getDuration() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getDuration()) || 0;
  }
  get progress() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getVideoLoadedFraction()) || 0;
  }
  getProgress() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getVideoLoadedFraction()) || 0;
  }
  get state() {
    var _a;
    return this._ready && n[(_a = this._player) == null ? void 0 : _a.getPlayerState()] || "unstarted";
  }
  getState() {
    var _a;
    return this._ready && n[(_a = this._player) == null ? void 0 : _a.getPlayerState()] || "unstarted";
  }
  get currentTime() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getCurrentTime()) || 0;
  }
  getCurrentTime() {
    var _a;
    return this._ready && ((_a = this._player) == null ? void 0 : _a.getCurrentTime()) || 0;
  }
  get youTubeInstance() {
    return this._ready && this._player;
  }
  getYouTubeInstance() {
    return this._ready && this._player;
  }
  get percentageWatched() {
    return this._ready && this.getCurrentTime() / this.getDuration() || 0;
  }
  getPercentageWatched() {
    return this._ready && this.getCurrentTime() / this.getDuration() || 0;
  }
  destroy() {
    this._destroy();
  }
  _destroy(e) {
    this.destroyed || (this.destroyed = true, this._options.debug && e && console.error(e.message), this._player && (this._player.stopVideo && this._player.stopVideo(), this._player.destroy()), this.videoId = void 0, this._element = void 0, this._options = {}, this._api = void 0, this._player = void 0, this._ready = false, this._queue = [], this._stopInterval(), this.removeListener("playing", this._startInterval), this.removeListener("paused", this._stopInterval), this.removeListener("buffering", this._stopInterval), this.removeListener("unstarted", this._stopInterval), this.removeListener("ended", this._stopInterval), e && this.emit("error", e));
  }
  _queueCommand(e, ...t) {
    this.destroyed || this._queue.push([e, t]);
  }
  _flushQueue() {
    for (; this._queue.length; ) {
      let e = this._queue.shift();
      if (!e)
        return;
      this[e[0]].apply(this, e[1]);
    }
  }
  _onReady() {
    this.destroyed || (this.emit("ready"), this._ready = true, this.load(this.videoId, this._autoplay, this._start), this._flushQueue());
  }
  _onStateChange(e) {
    if (this.destroyed)
      return;
    let t = n[e.data].toLowerCase();
    if (this._debug("STATE CHANGED:", t), t)
      ["paused", "buffering", "ended"].includes(t) && this._onTimeUpdate(), this.emit(t), this.emit("stateChange", t), ["unstarted", "playing", "cued"].includes(t) && this._onTimeUpdate();
    else
      throw new Error(`${"Unrecognized state change event"}: ${e}`);
  }
  _onPlaybackQualityChange(e) {
    this.destroyed || this.emit("playbackQualityChange", e.data);
  }
  _onPlaybackRateChange(e) {
    this.destroyed || this.emit("playbackRateChange", e.data);
  }
  _onError(e) {
    if (this.destroyed)
      return;
    let t = e.data;
    if (t === 5 && console.error("The request content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred."), t === 101 || t === 150 || t === 100 || t === 2)
      return this.emit("unplayable", this.videoId);
    this._destroy(new Error(`${"Unknown error code"}: ${t}`));
  }
  _onTimeUpdate() {
    this.destroyed || this.emit("timeupdate", this.getCurrentTime());
  }
  _startInterval() {
    this._interval = setInterval(() => this._onTimeUpdate(), this._options.timeUpdateFrequency);
  }
  _stopInterval() {
    this._interval && (clearInterval(this._interval), this._interval = void 0);
  }
};
export {
  o as default
};
//# sourceMappingURL=youtube-player-plus.js.map
